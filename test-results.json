{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":29,"numPassedTests":211,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTotalTestSuites":29,"numTotalTests":211,"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":24,"total":24,"unchecked":0,"unmatched":0,"updated":0},"startTime":1518187449424,"success":true,"testResults":[{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should allow all the reactProps"},{"failureMessages":[],"status":"passed","title":"should allow all the html props"},{"failureMessages":[],"status":"passed","title":"should handle all the SVG props"},{"failureMessages":[],"status":"passed","title":"should handle aria and data attributes"},{"failureMessages":[],"status":"passed","title":"should handle uppercase aria and data attributes"},{"failureMessages":[],"status":"passed","title":"should allow all the event handlers"},{"failureMessages":[],"status":"passed","title":"should not allow custom props"}],"endTime":1518187451108,"message":"","name":"/Users/phil/Development/styled-components/src/utils/test/validAttr.test.js","startTime":1518187450846,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should inject props.theme into a styled component"},{"failureMessages":[],"status":"passed","title":"should inject props.theme into a styled component multiple levels deep"},{"failureMessages":[],"status":"passed","title":"should properly allow a component to fallback to its default props when a theme is not provided"},{"failureMessages":[],"status":"passed","title":"should use ThemeProvider theme instead of defaultProps theme"},{"failureMessages":[],"status":"passed","title":"should properly allow a component to override the theme with a prop even if it is equal to defaultProps theme"},{"failureMessages":[],"status":"passed","title":"should properly allow a component to override the theme with a prop"},{"failureMessages":[],"status":"passed","title":"should properly set the theme with an empty object when no theme is provided and no defaults are set"},{"failureMessages":[],"status":"passed","title":"should only inject props.theme into styled components within its child component tree"},{"failureMessages":[],"status":"passed","title":"should inject props.theme into all styled components within the child component tree"},{"failureMessages":[],"status":"passed","title":"should inject new CSS when the theme changes"},{"failureMessages":[],"status":"passed","title":"should properly render with the same theme from default props on re-render"},{"failureMessages":[],"status":"passed","title":"should properly update style if theme is changed"},{"failureMessages":[],"status":"passed","title":"should properly update style if props used in styles is changed"},{"failureMessages":[],"status":"passed","title":"should change the classnames when the theme changes"},{"failureMessages":[],"status":"passed","title":"should inject props.theme into a component that uses withTheme hoc"},{"failureMessages":[],"status":"passed","title":"should properly update theme prop on hoc component when theme is changed"},{"failureMessages":[],"status":"passed","title":"should use ThemeProvider theme instead of defaultProps theme after initial render"},{"failureMessages":[],"status":"passed","title":"should hoist static properties when using withTheme"},{"failureMessages":[],"status":"passed","title":"should only pass the theme prop"},{"failureMessages":[],"status":"passed","title":"should accept innerRef and pass it on as ref"},{"failureMessages":[],"status":"passed","title":"should accept innerRef and pass it on for stateless function components"},{"failureMessages":[],"status":"passed","title":"should accept innerRef and pass it on for styled components"},{"failureMessages":[],"status":"passed","title":"should not break without a ThemeProvier if it has a defaultTheme"}],"endTime":1518187451201,"message":"","name":"/Users/phil/Development/styled-components/src/test/theme.test.js","startTime":1518187450770,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should warn once"},{"failureMessages":[],"status":"passed","title":"should warn if number of classes is 200"},{"failureMessages":[],"status":"passed","title":"should not warn if number of classes is below 200"}],"endTime":1518187451344,"message":"","name":"/Users/phil/Development/styled-components/src/test/warnTooManyClasses.test.js","startTime":1518187450872,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should not throw an error when no children are passed"},{"failureMessages":[],"status":"passed","title":"should accept a theme prop that's a plain object"},{"failureMessages":[],"status":"passed","title":"should render its child"},{"failureMessages":[],"status":"passed","title":"should merge its theme with an outer theme"},{"failureMessages":[],"status":"passed","title":"should merge its theme with multiple outer themes"},{"failureMessages":[],"status":"passed","title":"should be able to render two independent themes"},{"failureMessages":[],"status":"passed","title":"ThemeProvider propagates theme updates through nested ThemeProviders"}],"endTime":1518187451364,"message":"","name":"/Users/phil/Development/styled-components/src/models/test/ThemeProvider.test.js","startTime":1518187451308,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should preserve the styles"},{"failureMessages":[],"status":"passed","title":"should append a new component like normal"},{"failureMessages":[],"status":"passed","title":"should reuse a componentId"},{"failureMessages":[],"status":"passed","title":"should reuse a componentId and generated class"},{"failureMessages":[],"status":"passed","title":"should reuse a componentId and inject new classes"},{"failureMessages":[],"status":"passed","title":"should preserve the styles"},{"failureMessages":[],"status":"passed","title":"should not inject new styles for a component already rendered"},{"failureMessages":[],"status":"passed","title":"should inject new styles for a new computed style of a component"},{"failureMessages":[],"status":"passed","title":"should leave the existing styles there"},{"failureMessages":[],"status":"passed","title":"should generate new classes, even if they have the same name"},{"failureMessages":[],"status":"passed","title":"should leave the existing styles there"},{"failureMessages":[],"status":"passed","title":"should inject new global styles at the end"},{"failureMessages":[],"status":"passed","title":"should interleave global and local styles"},{"failureMessages":[],"status":"passed","title":"should not touch existing styles"},{"failureMessages":[],"status":"passed","title":"should replace stylesheets on-demand"},{"failureMessages":[],"status":"passed","title":"should not change styles if rendered in the same order they were created with"},{"failureMessages":[],"status":"passed","title":"should still not change styles if rendered in a different order"},{"failureMessages":[],"status":"passed","title":"should not touch existing styles"},{"failureMessages":[],"status":"passed","title":"should not regenerate keyframes"},{"failureMessages":[],"status":"passed","title":"should still inject new keyframes"},{"failureMessages":[],"status":"passed","title":"should pass the keyframes name along as well"}],"endTime":1518187451430,"message":"","name":"/Users/phil/Development/styled-components/src/test/rehydration.test.js","startTime":1518187451206,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should extract the CSS in a simple case"},{"failureMessages":[],"status":"passed","title":"should extract both global and local CSS"},{"failureMessages":[],"status":"passed","title":"should add a nonce to the stylesheet if webpack nonce is detected in the global scope"},{"failureMessages":[],"status":"passed","title":"should render CSS in the order the components were defined, not rendered"},{"failureMessages":[],"status":"passed","title":"should share global styles but keep renders separate"},{"failureMessages":[],"status":"passed","title":"should allow global styles to be injected during rendering"},{"failureMessages":[],"status":"passed","title":"should dispatch global styles to each ServerStyleSheet"},{"failureMessages":[],"status":"passed","title":"should return a generated React style element"},{"failureMessages":[],"status":"passed","title":"should return a generated React style element with nonce if webpack nonce is preset in the global scope"},{"failureMessages":[],"status":"passed","title":"should interleave styles with rendered HTML when utilitizing streaming"}],"endTime":1518187451500,"message":"","name":"/Users/phil/Development/styled-components/src/test/ssr.test.js","startTime":1518187451424,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should generate empty classes with no styles"},{"failureMessages":[],"status":"passed","title":"should attach styles to both classes if only parent has styles"},{"failureMessages":[],"status":"passed","title":"should attach styles to child class if only child has styles"},{"failureMessages":[],"status":"passed","title":"should generate a class for the child with the rules of the parent"},{"failureMessages":[],"status":"passed","title":"should generate different classes for both parent and child"},{"failureMessages":[],"status":"passed","title":"should copy nested rules to the child"},{"failureMessages":[],"status":"passed","title":"should keep default props from parent"},{"failureMessages":[],"status":"passed","title":"should keep prop types from parent"},{"failureMessages":[],"status":"passed","title":"should keep custom static member from parent"},{"failureMessages":[],"status":"passed","title":"should keep static member in triple inheritance"},{"failureMessages":[],"status":"passed","title":"should keep styles in >= 3 inheritances"},{"failureMessages":[],"status":"passed","title":"should allow changing component"},{"failureMessages":[],"status":"passed","title":"should allow changing component and extending"},{"failureMessages":[],"status":"passed","title":"should allow changing component and adding attributes"}],"endTime":1518187451515,"message":"","name":"/Users/phil/Development/styled-components/src/test/extending.test.js","startTime":1518187451450,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"work fine with an empty object"},{"failureMessages":[],"status":"passed","title":"pass a simple attr"},{"failureMessages":[],"status":"passed","title":"call an attr function"},{"failureMessages":[],"status":"passed","title":"pass props to the attr function"},{"failureMessages":[],"status":"passed","title":"should replace attrs with props"},{"failureMessages":[],"status":"passed","title":"should merge className"},{"failureMessages":[],"status":"passed","title":"should merge className even if its a function"},{"failureMessages":[],"status":"passed","title":"should work with data and aria attributes"},{"failureMessages":[],"status":"passed","title":"merge attrs"},{"failureMessages":[],"status":"passed","title":"merge attrs when inheriting SC"},{"failureMessages":[],"status":"passed","title":"pass attrs to style block"},{"failureMessages":[],"status":"passed","title":"should pass through children as a normal prop"},{"failureMessages":[],"status":"passed","title":"should pass through complex children as well"},{"failureMessages":[],"status":"passed","title":"should override children of course"}],"endTime":1518187451597,"message":"","name":"/Users/phil/Development/styled-components/src/test/attrs.test.js","startTime":1518187451518,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"doesnt merge strings"},{"failureMessages":[],"status":"passed","title":"drops nulls"},{"failureMessages":[],"status":"passed","title":"doesnt drop any numbers"},{"failureMessages":[],"status":"passed","title":"toStrings everything"},{"failureMessages":[],"status":"passed","title":"hypenates objects"},{"failureMessages":[],"status":"passed","title":"flattens nested rulesets"},{"failureMessages":[],"status":"passed","title":"flattens double nested rulesets"},{"failureMessages":[],"status":"passed","title":"flattens subarrays"},{"failureMessages":[],"status":"passed","title":"defers functions"},{"failureMessages":[],"status":"passed","title":"merges strings"},{"failureMessages":[],"status":"passed","title":"drops nulls"},{"failureMessages":[],"status":"passed","title":"doesnt drop any numbers"},{"failureMessages":[],"status":"passed","title":"toStrings everything"},{"failureMessages":[],"status":"passed","title":"hypenates objects"},{"failureMessages":[],"status":"passed","title":"flattens nested rulesets"},{"failureMessages":[],"status":"passed","title":"flattens double nested rulesets"},{"failureMessages":[],"status":"passed","title":"flattens subarrays"},{"failureMessages":[],"status":"passed","title":"executes functions"},{"failureMessages":[],"status":"passed","title":"resolves rulesets after executing functions"},{"failureMessages":[],"status":"passed","title":"resolves double nested rulesets after executing functions"}],"endTime":1518187451673,"message":"","name":"/Users/phil/Development/styled-components/src/no-parser/test/flatten.test.js","startTime":1518187451639,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should not throw an error when called"},{"failureMessages":[],"status":"passed","title":"should throw a meaningful error when called with null"},{"failureMessages":[],"status":"passed","title":"should not inject anything by default"},{"failureMessages":[],"status":"passed","title":"should inject component class when rendered even if no styles are passed"},{"failureMessages":[],"status":"passed","title":"should inject styles"},{"failureMessages":[],"status":"passed","title":"should inject only once for a styled component, no matter how often it's mounted"},{"failureMessages":[],"status":"passed","title":"Should have the correct styled(component) displayName"},{"failureMessages":[],"status":"passed","title":"should pass the ref to the component"},{"failureMessages":[],"status":"passed","title":"should not leak the innerRef prop to the wrapped child"},{"failureMessages":[],"status":"passed","title":"should pass the full className to the wrapped child"},{"failureMessages":[],"status":"passed","title":"should pass the innerRef to the wrapped styled component"},{"failureMessages":[],"status":"passed","title":"should respect the order of StyledComponent creation for CSS ordering"}],"endTime":1518187451685,"message":"","name":"/Users/phil/Development/styled-components/src/test/basic.test.js","startTime":1518187451588,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should be auto-generated if none passed"},{"failureMessages":[],"status":"passed","title":"should be attached if supplied"},{"failureMessages":[],"status":"passed","title":"should be generated as \"sc\" + hash"},{"failureMessages":[],"status":"passed","title":"should be generated from displayName + hash"},{"failureMessages":[],"status":"passed","title":"should be attached if passed in"},{"failureMessages":[],"status":"passed","title":"should be combined with displayName if both passed in"},{"failureMessages":[],"status":"passed","title":"should work with `.extend`"},{"failureMessages":[],"status":"passed","title":"should work with `.withComponent`"},{"failureMessages":[],"status":"passed","title":"should merge the options strings"},{"failureMessages":[],"status":"passed","title":"should keep the last value passed in when merging"}],"endTime":1518187451736,"message":"","name":"/Users/phil/Development/styled-components/src/test/expanded-api.test.js","startTime":1518187451671,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should use given stylesheet instance"},{"failureMessages":[],"status":"passed","title":"should render its child"},{"failureMessages":[],"status":"passed","title":"should append style to given target"},{"failureMessages":[],"status":"passed","title":"should append style to given target in iframe"},{"failureMessages":[],"status":"passed","title":"should apply styles to appropriate targets for nested StyleSheetManagers"},{"failureMessages":[],"status":"passed","title":"should extract CSS outside the nested StyleSheetManager"}],"endTime":1518187451825,"message":"","name":"/Users/phil/Development/styled-components/src/models/test/StyleSheetManager.test.js","startTime":1518187451744,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"doesnt merge strings"},{"failureMessages":[],"status":"passed","title":"drops nulls"},{"failureMessages":[],"status":"passed","title":"doesnt drop any numbers"},{"failureMessages":[],"status":"passed","title":"toStrings everything"},{"failureMessages":[],"status":"passed","title":"hypenates objects"},{"failureMessages":[],"status":"passed","title":"handles nested objects"},{"failureMessages":[],"status":"passed","title":"toStrings class instances"},{"failureMessages":[],"status":"passed","title":"flattens subarrays"},{"failureMessages":[],"status":"passed","title":"defers functions"},{"failureMessages":[],"status":"passed","title":"executes functions"},{"failureMessages":[],"status":"passed","title":"passes values to function"},{"failureMessages":[],"status":"passed","title":"recursively calls functions"}],"endTime":1518187451870,"message":"","name":"/Users/phil/Development/styled-components/src/utils/test/flatten.test.js","startTime":1518187451838,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"defaults to reusing the component displayName"},{"failureMessages":[],"status":"passed","title":"falls back to the class name"},{"failureMessages":[],"status":"passed","title":"ultimately falls back to \"Component\""}],"endTime":1518187451923,"message":"","name":"/Users/phil/Development/styled-components/src/utils/test/getComponentName.test.js","startTime":1518187451906,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should append a style"},{"failureMessages":[],"status":"passed","title":"should append multiple styles"},{"failureMessages":[],"status":"passed","title":"should handle inline style objects"},{"failureMessages":[],"status":"passed","title":"should handle inline style objects with media queries"},{"failureMessages":[],"status":"passed","title":"should handle inline style objects with pseudo selectors"},{"failureMessages":[],"status":"passed","title":"should handle inline style objects with pseudo selectors"},{"failureMessages":[],"status":"passed","title":"should handle inline style objects with nesting"},{"failureMessages":[],"status":"passed","title":"should handle inline style objects with contextual selectors"},{"failureMessages":[],"status":"passed","title":"should inject styles of multiple components"},{"failureMessages":[],"status":"passed","title":"should inject styles of multiple components based on creation, not rendering order"},{"failureMessages":[],"status":"passed","title":"should strip a JS-style (invalid) comment in the styles"},{"failureMessages":[],"status":"passed","title":"should add a webpack nonce to the style tags if one is available in the global scope"}],"endTime":1518187451939,"message":"","name":"/Users/phil/Development/styled-components/src/test/styles.test.js","startTime":1518187451867,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should throw a meaningful error when called with null"},{"failureMessages":[],"status":"passed","title":"should correctly assemble preprocessed CSS"},{"failureMessages":[],"status":"passed","title":"should correctly execute passed functions and assemble preprocessed CSS"}],"endTime":1518187451994,"message":"","name":"/Users/phil/Development/styled-components/src/no-parser/test/basic.test.js","startTime":1518187451950,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"replaces characters that could be part of CSS selectors"},{"failureMessages":[],"status":"passed","title":"replaces double hyphens with a single hyphen"},{"failureMessages":[],"status":"passed","title":"removes extraneous hyphens at the ends of the string"}],"endTime":1518187452016,"message":"","name":"/Users/phil/Development/styled-components/src/utils/test/escape.test.js","startTime":1518187451996,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should have all valid HTML5 elements defined as properties"}],"endTime":1518187452084,"message":"","name":"/Users/phil/Development/styled-components/src/constructors/test/styled.test.js","startTime":1518187452026,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should work for null or empty"},{"failureMessages":[],"status":"passed","title":"should ignore anything before the first SC"},{"failureMessages":[],"status":"passed","title":"should return a single SC"},{"failureMessages":[],"status":"passed","title":"should return a single SC with multiple lines"},{"failureMessages":[],"status":"passed","title":"should return multiple SCs with single lines"},{"failureMessages":[],"status":"passed","title":"should return multiple SCs with multiple lines"},{"failureMessages":[],"status":"passed","title":"should include whitespace after a component"}],"endTime":1518187452110,"message":"","name":"/Users/phil/Development/styled-components/src/utils/test/extractCompsFromCSS.test.js","startTime":1518187452084,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should create alphabetic names for number input data"}],"endTime":1518187452139,"message":"","name":"/Users/phil/Development/styled-components/src/utils/test/generateAlphabeticName.test.js","startTime":1518187452106,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should execute interpolations and fall back"},{"failureMessages":[],"status":"passed","title":"should execute interpolations and inject props"},{"failureMessages":[],"status":"passed","title":"should ignore non-0 falsy object interpolations"}],"endTime":1518187452199,"message":"","name":"/Users/phil/Development/styled-components/src/test/props.test.js","startTime":1518187452159,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should inject rules into the head"},{"failureMessages":[],"status":"passed","title":"should non-destructively inject styles when called repeatedly"},{"failureMessages":[],"status":"passed","title":"should non-destructively inject styles when called after a component"}],"endTime":1518187452227,"message":"","name":"/Users/phil/Development/styled-components/src/constructors/test/injectGlobal.test.js","startTime":1518187452189,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should take precedence over ThemeProvider"},{"failureMessages":[],"status":"passed","title":"should fallback to default theme"}],"endTime":1518187452266,"message":"","name":"/Users/phil/Development/styled-components/src/utils/test/determineTheme.test.js","startTime":1518187452234,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"blindly interleave"},{"failureMessages":[],"status":"passed","title":"should be driven off the number of interpolations"}],"endTime":1518187452301,"message":"","name":"/Users/phil/Development/styled-components/src/utils/test/interleave.test.js","startTime":1518187452285,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should mark styles without any functions as static"},{"failureMessages":[],"status":"passed","title":"should mark styles with a nested styled component as static"},{"failureMessages":[],"status":"passed","title":"should mark styles with a dynamic style as not static"},{"failureMessages":[],"status":"passed","title":"should mark components with numeric attriutes as static"},{"failureMessages":[],"status":"passed","title":"should mark components with dynamic attributes as not static"}],"endTime":1518187452348,"message":"","name":"/Users/phil/Development/styled-components/src/test/staticCaching.test.js","startTime":1518187452310,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should add vendor prefixes in the right order"},{"failureMessages":[],"status":"passed","title":"should add vendor prefixes for display"},{"failureMessages":[],"status":"passed","title":"should pass through custom properties"}],"endTime":1518187452382,"message":"","name":"/Users/phil/Development/styled-components/src/test/css.test.js","startTime":1518187452351,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should correctly assemble preprocessed CSS"}],"endTime":1518187452406,"message":"","name":"/Users/phil/Development/styled-components/src/no-parser/test/keyframes.test.js","startTime":1518187452376,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should let you use another component in a css rule"}],"endTime":1518187452438,"message":"","name":"/Users/phil/Development/styled-components/src/test/overriding.test.js","startTime":1518187452415,"status":"passed","summary":""},{"assertionResults":[{"failureMessages":[],"status":"passed","title":"should return its name"},{"failureMessages":[],"status":"passed","title":"should insert the correct styles"}],"endTime":1518187452465,"message":"","name":"/Users/phil/Development/styled-components/src/constructors/test/keyframes.test.js","startTime":1518187452448,"status":"passed","summary":""}],"wasInterrupted":false}